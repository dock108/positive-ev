"""\nGrade Calculator Module\n=====================\n\nThis module calculates grades for betting opportunities based on multiple factors\nincluding expected value, timing, and market edge.\n\nKey Features:\n    - Multi-factor grade calculation (EV, timing, edge)\n    - Batch processing of bets\n    - CSV export functionality\n    - Supabase integration for data storage\n    - Configurable date range processing\n\nGrade Calculation Weights:\n    - Expected Value (EV): 55%\n    - Market Edge: 30%\n    - Timing Score: 15%\n\nGrade Scale:\n    A: >= 90\n    B: >= 80\n    C: >= 70\n    D: >= 65\n    F: < 65\n\nDependencies:\n    - pandas: For data manipulation and CSV export\n    - supabase-py: For database operations\n    - python-dotenv: For environment variables\n\nUsage:\n    # Process last 24 hours\n    python src/grade_calculator.py\n\n    # Process specific date range\n    python src/grade_calculator.py --start-date 2024-03-01 --end-date 2024-03-14\n\nAuthor: highlyprofitable108\nCreated: March 2025\nUpdated: March 2025 - Removed Kelly criterion, adjusted weights, improved timing function\n"""\n\nimport os\nimport sys\nimport argparse\nimport pandas as pd\nfrom datetime import datetime, timedelta\n\n# Add the project root to Python path\nproject_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nsys.path.insert(0, project_root)\n\n# Import from consolidated modules\ntry:\n    # Try relative imports (when used as a module)\n    from .config import (\n        CALCULATOR_LOG_FILE, CSV_DIR,\n        setup_logging\n    )\n    from .common_utils import (\n        safe_float\n    )\n    from .supabase_client import (\n        get_supabase_client, batch_upsert, get_most_recent_timestamp\n    )\nexcept ImportError:\n    # Fall back to absolute imports (when run directly)\n    from src.config import (\n        CALCULATOR_LOG_FILE, CSV_DIR,\n        setup_logging\n    )\n    from src.common_utils import (\n        safe_float\n    )\n    from src.supabase_client import (\n        get_supabase_client, batch_upsert, get_most_recent_timestamp\n    )\n\n# Initialize logger\nlogger = setup_logging(CALCULATOR_LOG_FILE, "grade_calculator")\n\ndef calculate_ev_score(ev_percent):\n    """Calculate score based on Expected Value."""\n    try:\n        ev = safe_float(ev_percent)\n        if ev is None:\n            return 0\n        normalized_ev = (ev + 10) * 5\n        return max(0, min(100, normalized_ev))\n    except Exception as e:\n        logger.error(f"Error calculating EV score: {str(e)}")\n        return 0\n\ndef calculate_timing_score(event_time, timestamp):\n    """Calculate score based on time until event with more granular ranges."""\n    try:\n        # Parse times\n        if isinstance(event_time, str):\n            try:\n                # Try to parse ISO format\n                event_dt = datetime.fromisoformat(event_time.replace('Z', '+00:00'))\n            except ValueError:\n                # Try to parse with standard format\n                event_dt = datetime.strptime(event_time, '%Y-%m-%d %H:%M:%S')\n        else:\n            event_dt = event_time\n            \n        if isinstance(timestamp, str):\n            try:\n                # Try to parse ISO format\n                bet_dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))\n            except ValueError:\n                # Try to parse with standard format\n                bet_dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')\n        else:\n            bet_dt = timestamp\n        \n        # Calculate time difference in hours\n        time_diff = (event_dt - bet_dt).total_seconds() / 3600\n        \n        # More granular scoring system\n        if time_diff <= 0:\n            return 0  # Event already started\n        elif time_diff <= 0.5:\n            return 100  # Less than 30 minutes\n        elif time_diff <= 1:\n            return 95  # 30-60 minutes\n        elif time_diff <= 2:\n            return 90  # 1-2 hours\n        elif time_diff <= 3:\n            return 85  # 2-3 hours\n        elif time_diff <= 4:\n            return 80  # 3-4 hours\n        elif time_diff <= 6:\n            return 75  # 4-6 hours\n        elif time_diff <= 8:\n            return 70  # 6-8 hours\n        elif time_diff <= 12:\n            return 65  # 8-12 hours\n        elif time_diff <= 18:\n            return 60  # 12-18 hours\n        elif time_diff <= 24:\n            return 55  # 18-24 hours\n        elif time_diff <= 36:\n            return 50  # 24-36 hours\n        elif time_diff <= 48:\n            return 45  # 36-48 hours\n        elif time_diff <= 72:\n            return 40  # 48-72 hours\n        else:\n            return 30  # More than 72 hours\n    except Exception as e:\n        logger.error(f"Error calculating timing score: {str(e)}")\n        return 0\n\ndef calculate_edge_score(win_probability, odds):\n    """Calculate score based on edge over market implied probability."""\n    try:\n        win_prob = safe_float(win_probability)\n        if win_prob is None:\n            return 0\n        \n        odds = float(odds)\n        market_implied_prob = None\n        if odds > 0:\n            market_implied_prob = 100 / (odds + 100) * 100\n        else:\n            market_implied_prob = abs(odds) / (abs(odds) + 100) * 100\n        \n        edge = win_prob - market_implied_prob\n        normalized_edge = (edge + 10) * 5\n        return max(0, min(100, normalized_edge))\n    except Exception as e:\n        logger.error(f"Error calculating edge score: {str(e)}")\n        return 0\n\ndef assign_grade(composite_score):\n    """Assign letter grade based on composite score."""\n    if composite_score >= 90:\n        return 'A'\n    elif composite_score >= 80:\n        return 'B'\n    elif composite_score >= 70:\n        return 'C'\n    elif composite_score >= 65:\n        return 'D'\n    else:\n        return 'F'\n\ndef calculate_bet_grade(bet):\n    """Calculate grade for a single bet."""\n    try:\n        # Extract required fields\n        bet_id = bet.get('bet_id')\n        ev_percent = bet.get('ev_percent')\n        event_time = bet.get('event_time')\n        odds = bet.get('odds')\n        win_probability = bet.get('win_probability')\n        \n        # Skip bets with missing critical data\n        if not all([bet_id, ev_percent, odds, win_probability, event_time]):\n            logger.debug(f"SKIPPED: Bet {bet_id} - Missing required data")\n            return None\n        \n        # Calculate individual scores\n        ev_score = calculate_ev_score(ev_percent)\n        timing_score = calculate_timing_score(event_time, bet.get('timestamp'))\n        edge_score = calculate_edge_score(win_probability, odds)\n        \n        # Calculate composite score with updated weights\n        composite_score = (\n            0.55 * ev_score +\n            0.30 * edge_score +\n            0.15 * timing_score\n        )\n        \n        # Assign grade\n        grade = assign_grade(composite_score)\n        \n        # Create grade record\n        return {\n            "bet_id": bet_id,\n            "grade": grade,\n            "calculated_at": datetime.now().isoformat(),\n            "ev_score": ev_score,\n            "timing_score": timing_score,\n            "historical_edge": edge_score,\n            "composite_score": composite_score\n        }\n    except Exception as e:\n        logger.error(f"Error calculating grade for bet {bet.get('bet_id', 'unknown')}: {e}")\n        return None
